<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>it.cnr.si.alfresco</groupId>
	<artifactId>alfresco-solr-patch</artifactId>
	<version>2.0.5</version>
	<packaging>amp</packaging>
	<url></url>
	<description>Alfresco extension</description>
	<pluginRepositories>
		<pluginRepository>
			<id>alfresco</id>
			<url>http://maven.alfresco.com/nexus/content/repositories/public</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>
	<repositories>
		<repository>
			<id>alfresco</id>
			<url>http://maven.alfresco.com/nexus/content/repositories/public</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>
	<properties>
		<webapp.name>alf4patch</webapp.name>
		<alfresco.version>4.0.b</alfresco.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco</artifactId>
			<version>${alfresco.version}</version>
			<type>war</type>
			<classifier>community</classifier>
			<scope>provided</scope>
		</dependency>
		<!-- All provided libs (as contained in the war dependency) but useful 
			for development (e.g. IDE configuration) -->
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco-web-client</artifactId>
			<version>${alfresco.version}</version>
			<scope>provided</scope>
			<classifier>community</classifier>
		</dependency>
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco-core</artifactId>
			<version>${alfresco.version}</version>
			<scope>provided</scope>
			<classifier>community</classifier>
		</dependency>
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco-repository</artifactId>
			<version>${alfresco.version}</version>
			<scope>provided</scope>
			<classifier>community</classifier>
		</dependency>
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco-remote-api</artifactId>
			<version>${alfresco.version}</version>
			<scope>provided</scope>
			<classifier>community</classifier>
		</dependency>
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco-datamodel</artifactId>
			<version>${alfresco.version}</version>
			<scope>provided</scope>
			<classifier>community</classifier>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>acegisecurity</groupId>
			<artifactId>acegi-security</artifactId>
			<version>0.9.0</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>3.1</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.extensions.surf</groupId>
			<artifactId>spring-surf-core</artifactId>
			<version>1.0.0</version>
			<type>pom</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.extensions.surf</groupId>
			<artifactId>spring-surf-core-configservice</artifactId>
			<version>1.0.0</version>
			<type>pom</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.extensions.surf</groupId>
			<artifactId>spring-surf-api</artifactId>
			<version>1.0.0</version>
			<type>pom</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-core</artifactId>
			<version>2.4.1</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-queries</artifactId>
			<version>2.4.1</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>saxpath</groupId>
			<artifactId>saxpath</artifactId>
			<version>1.0-FCS</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.solr</groupId>
			<artifactId>solr-solrj</artifactId>
			<version>1.4.1</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20090211</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>
	<build>
		<finalName>${webapp.name}</finalName>

		<plugins>
			<!-- Needed for cross OS compatibility in acp/zip encoding -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- useful for eclipse project configuration. Run "mvn eclipse:eclipse" 
				and hit "F5" on the project -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<!-- <configuration> <downloadSources>true</downloadSources> </configuration> -->
			</plugin>
			<!-- Add documentation locales here -->
			<plugin>
				<artifactId>maven-site-plugin</artifactId>
				<configuration>
					<locales>en</locales>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.alfresco.maven.plugin</groupId>
				<artifactId>maven-amp-plugin</artifactId>
				<version>3.0.2</version>
				<extensions>true</extensions>
				<configuration>
					<archive>
						<addMavenDescriptor>false</addMavenDescriptor>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack-amps</id>
						<phase>process-resources</phase>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<configuration>
							<includeTypes>amp</includeTypes>
							<outputDirectory>${build.directory}/${webapp.name}</outputDirectory>
							<excludes>META*</excludes>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<!-- This is required to be re-defined explicitly at plugin level as 
						otherwise the 'amp' extension unArchiver won't be available to the maven-dependency-plugin -->
					<dependency>
						<groupId>org.alfresco.maven.plugin</groupId>
						<artifactId>maven-amp-plugin</artifactId>
						<version>3.0.2</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<archiveClasses>false</archiveClasses>
					<webappDirectory>target/${webapp.name}</webappDirectory>
					<webResources>

					</webResources>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>0.3-SNAPSHOT</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<configuration>
					<!-- useEditMode>true</useEditMode> -->
					<dryRun>true</dryRun>
					<preparationGoals>clean package</preparationGoals>
					<goals>install deploy cargo:undeploy cargo:deploy
						site:deploy</goals>
					<!-- <tagBase>${svn.tags.url}</tagBase> -->
				</configuration>
			</plugin>
			<!-- Adds support for books PDF and RTF generation for single sourced 
				documentation -->
			<plugin>
				<groupId>org.apache.maven.doxia</groupId>
				<artifactId>doxia-maven-plugin</artifactId>
				<version>1.0-alpha-10</version>
				<executions>
					<execution>
						<phase>pre-site</phase>
						<goals>
							<goal>render-books</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- | Target books dir: within the site so it can be linked and deployed 
						| TODO: Use ${pom.target.dir} or so similar property instead of | hard wiring 
						'target' -->
					<generatedDocs>target/site/books</generatedDocs>
					<books>
						<book>
							<directory>src/site</directory>
							<descriptor>src/books/manual.xml</descriptor>
							<formats>
								<format>
									<id>xdoc</id>
								</format>
								<format>
									<id>pdf</id>
								</format>
								<format>
									<id>rtf</id>
								</format>
							</formats>
						</book>
					</books>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<reporting>
		<plugins>
			<!-- Targeting 1.6 -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jxr-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-clover-plugin</artifactId>
			</plugin>
			<!-- Enable this plugin only after setting SCM connection, otherwise mvn 
				site will fail <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>changelog-maven-plugin</artifactId> 
				</plugin> -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>taglist-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</reporting>
	<!-- | Configured to deploy on SS public repository ATM. | You'd need a 
		valid uid/pwd in our repo | -->

	<!-- | Build Profiles -->
	<profiles>
		<!-- | Profile to automatically restore export files committed under | 
			"tools/export/<restoreVersion>/export_*.[acp,xml]" and the restore-context.xml. 
			| Gets automatically activated specifiying a value for the property | restoreVersion 
			which maps to the name of the folder. | NB: In order this to work you *MUST* 
			export your full repo with "export" package name -->
		<profile>
			<id>restore</id>
			<activation>
				<property>
					<name>restoreVersion</name>
				</property>
			</activation>
			<build>
				<defaultGoal>package</defaultGoal>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<includes>
							<include>**/restore-*.xml</include>
						</includes>
					</resource>
					<resource>
						<directory>tools/export/${restoreVersion}</directory>
						<includes>
							<include>**</include>
						</includes>
						<targetPath>alfresco/extension/restore</targetPath>
					</resource>
				</resources>
			</build>
		</profile>
		<!-- | Profile to automatically include ldap configuration files | (not 
			included by default build) -->
		<profile>
			<id>ldap</id>
			<activation>
				<property>
					<name>enterprise</name>
				</property>
			</activation>
			<build>
				<defaultGoal>package</defaultGoal>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<includes>
							<include>**/ldap-*-context.xml</include>
						</includes>
					</resource>
				</resources>
			</build>
		</profile>
		<!-- Profile for deploying (only locally , due to http://jira.codehaus.org/browse/CARGO-416) 
			on jboss. | | FIXME: Add <dependencies> override in order to have jboss specific 
			alfresco-*-jboss.war (e.g no log4j.properties and log4j jar) | being substituted 
			as a depenendency, and avoid log4j classCasts | -->
		<profile>
			<id>jboss</id>
			<!-- | By default the src/main/properties/local/application.properties 
				uses the property "alfresco.data.location" to specify where | alf_data gets 
				created and "alfresco.db.name" for the database name. | For local jboss deployment 
				default creation dir (alf_data) is under appserver $JBOSS_HOME/bin directory 
				(as location is specified relatively to | run dir) | | Empty log dir creates 
				file alfresco.log in appserver default dir. You can also specify a meaningful 
				log directory for the server | (add a trailing slash, e.g. '/var/log/alfresco/' 
				) | | NB: Remember to grant appropriate permissions on database you specify 
				here by running the script found in tools/mysql/[jetty/tomcat/jboss] | sql 
				scripts (after editing them), or run those you find in target/classes/tools/[db_remove,db_setup].sql 
				which are already filtered according to | ' alfresco.db.name ' property. 
				| -->
			<properties>
				<alfresco.data.location>./alf_data</alfresco.data.location>
				<alfresco.db.name>alf_jboss</alfresco.db.name>
				<log.dir></log.dir>
			</properties>
			<build>
				<defaultGoal>cargo:deploy</defaultGoal>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<excludes>
							<exclude>**/restore-context.xml</exclude>
							<exclude>**/ldap-*.xml</exclude>
						</excludes>
					</resource>
					<resource>
						<directory>src/main/resources</directory>
						<includes>
							<include></include>
						</includes>
						<filtering>true</filtering>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>jboss4x</containerId>
								<type>remote</type>
							</container>
							<configuration>
								<type>runtime</type>
								<properties>
									<cargo.servlet.port>8080</cargo.servlet.port>
								</properties>
							</configuration>
							<deployer>
								<type>remote</type>
								<deployables>
									<deployable>
										<groupId>${pom.groupId}</groupId>
										<artifactId>${pom.artifactId}</artifactId>
										<type>war</type>
									</deployable>
								</deployables>
							</deployer>
						</configuration>
					</plugin>
					<!-- log4j.properties is excluded from source and dependencies -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<configuration>
							<archiveClasses>false</archiveClasses>
							<webappDirectory>target/${webapp.name}</webappDirectory>
							<dependentWarExcludes>**/log4j.properties,**/lib/log4j*.jar,log4j.properties</dependentWarExcludes>
							<warSourceExcludes>**/log4j.properties,WEB-INF/classes/tools</warSourceExcludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- | Profile for deploying on tomcat 5.x | | -->
		<profile>
			<id>tomcat</id>
			<!-- | By default the src/main/properties/local/application.properties 
				uses the property "alfresco.data.location" to specify where | alf_data gets 
				created. | For tomcat deployment default creation dir (alf_data) is under 
				appserver $CATALINA_HOME/bin directory (as location is specified relatively 
				to | run dir) and db is configurable likewhise. | Empty log dir creates file 
				alfresco.log in appserver default dir. You can also specify a meaningful 
				log directory for the server | (add a trailing slash, e.g. '/var/log/alfresco/' 
				) | | NB: Remember to grant appropriate permissions on database you specify 
				here by running the script found in tools/mysql/[jetty/tomcat/jboss] | mysql 
				scripts (properly edited) or those you find in target/tools/[db_remove,db_setup].sql 
				which are already filtered according to | ' alfresco.db.name ' property | -->
			<properties>
				<alfresco.data.location>./alf_data</alfresco.data.location>
				<alfresco.db.name>alf_tomcat</alfresco.db.name>
				<log.dir></log.dir>
			</properties>
			<build>
				<defaultGoal>package</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>tomcat5x</containerId>
								<type>remote</type>
							</container>
							<!-- Configure here your Tomcat server manager credentials -->
							<configuration>
								<type>runtime</type>
								<properties>
									<cargo.remote.username>tomcat</cargo.remote.username>
									<cargo.remote.password>tomcat</cargo.remote.password>
									<cargo.servlet.port>8080</cargo.servlet.port>
								</properties>
							</configuration>
							<deployer>
								<type>remote</type>
								<deployables>
									<deployable>
										<artifactId>${pom.artifactId}</artifactId>
										<type>war</type>
										<properties>
											<context>/${webapp.name}</context>
										</properties>
									</deployable>
								</deployables>
							</deployer>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- -Pinitialize : boostraps the db (only to be used the 1st run) -->
		<profile>
			<id>initialize</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>sql-maven-plugin</artifactId>
						<version>1.1</version>
						<dependencies>
							<dependency>
								<groupId>mysql</groupId>
								<artifactId>mysql-connector-java</artifactId>
								<version>5.0.3</version>
							</dependency>
						</dependencies>
						<!-- common configuration shared by all executions -->
						<configuration>
							<driver>org.gjt.mm.mysql.Driver</driver>
							<url>jdbc:mysql://localhost/</url>
							<username>${alfresco.db.username}</username>
							<password>${alfresco.db.password}</password>
						</configuration>
						<executions>
							<execution>
								<phase>generate-resources</phase>
								<id>drop-db</id>
								<goals>
									<goal>execute</goal>
								</goals>
								<!-- Bootstraps the DB -->
								<configuration>
									<onError>continue</onError>
									<sqlCommand>drop database ${alfresco.db.name}</sqlCommand>
								</configuration>
							</execution>
							<execution>
								<phase>generate-resources</phase>
								<id>create-db</id>
								<goals>
									<goal>execute</goal>
								</goals>
								<!-- Bootstraps the DB -->
								<configuration>
									<sqlCommand>create database ${alfresco.db.name}</sqlCommand>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Cleans the alf_data folder and logs -->
					<plugin>
						<artifactId>maven-clean-plugin</artifactId>
						<executions>
							<execution>
								<id>clean-execution</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>clean</goal>
								</goals>
								<configuration>
									<filesets>
										<fileset>
											<directory>${alfresco.data.location}</directory>
											<includes>
												<include>**/*</include>
											</includes>
										</fileset>
										<fileset>
											<directory>.</directory>
											<includes>
												<include>**/*.log</include>
												<include>*.log</include>
											</includes>
										</fileset>
									</filesets>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>run</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.mortbay.jetty</groupId>
						<artifactId>maven-jetty-plugin</artifactId>
						<version>6.1.21</version>
						<executions>
							<!-- Runs jetty when 'integration-test' phase is called -->
							<execution>
								<id>it</id>
								<phase>integration-test</phase>
								<goals>
									<goal>run-exploded</goal>
								</goals>
								<configuration>
									<contextPath>/${webapp.name}</contextPath>
									<webApp>${pom.build.directory}/${webapp.name}</webApp>
									<scanIntervalSeconds>10</scanIntervalSeconds>
									<connectors>
										<connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
											<port>8080</port>
											<maxIdleTime>60000</maxIdleTime>
										</connector>
									</connectors>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>

		</profile>
	</profiles>
</project>